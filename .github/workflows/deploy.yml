name: Deploy

on:
  push:
    branches:
    - main

  workflow_dispatch:

env:
  OIDC_IAM_ROLE_ARN: ${{ secrets.OIDC_IAM_ROLE_ARN }}
  AWS_REGION: us-west-2
  APP_NANE: next-cloudfront-template

permissions:
  id-token: write
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.runnable-check.outputs.skip }}
    steps:
    - name: Check runnable
      id: runnable-check
      run: |
        if [ -z "${{ env.OIDC_IAM_ROLE_ARN }}" ]; then
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

  deploy:
    needs: [prepare]
    strategy:
      matrix:
        node-version: [18.x]

    if: needs.setup.outputs.skip != 'true'

    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ env.OIDC_IAM_ROLE_ARN }}
        role-session-name: GitHubActions
        aws-region: ${{ env.AWS_REGION }}

    - uses: actions/checkout@v3

    - name: Use install pnpm
      shell: bash
      run: |
        corepack enable && \
        corepack prepare pnpm@8.5.1 --activate

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3.7.0
      with:
        node-version: ${{ matrix.node-version }}
        check-latest: true
        cache: pnpm

    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v3
      name: Setup pnpm cache
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Setup global dir for pnpm
      shell: bash
      run: |
        echo "PNPM_HOME=/usr/local/bin" >> $GITHUB_ENV

    - name: Install global packages
      run: |
        pnpm add -g aws-cdk

    - name: install
      env:
        CI: true
      run: pnpm -r install --no-frozen-lockfile

    - name: deploy (cdk)
      working-directory: cdk
      run: |
        cdk deploy \
          -c appkName=${{ env.APP_NANE }} \
          -c env=dev
